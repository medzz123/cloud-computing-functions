import { Response } from 'express';
import { array, assert, Infer, object, optional, string } from 'superstruct';

import admin, { db } from '../db';
import { CustomRequest } from '../types/request';
import { handleError } from '../utils/handleError';
import { nanoid, tinyId } from '../utils/uid';

export interface CreateEventBody {
  name: string;
  location: string;
  emails: string[];
}

const Event = object({
  name: string(),
  startTime: optional(string()),
  endTime: optional(string()),
  location: optional(string()),
  description: optional(string()),
  title: optional(string()),
  date: string(),
  emails: array(string()),
});

type EventBody = Infer<typeof Event>;

export const createEvent = async (
  req: CustomRequest<EventBody>,
  res: Response
) => {
  try {
    assert(req.body, Event);

    const {
      name,
      location,
      emails,
      startTime,
      endTime,
      description,
      title,
      date,
    } = req.body;

    const attendees = emails.map((email) => ({
      attending: false,
      email,
      replied: false,
      token: nanoid(),
    }));

    const { uid } = await admin.auth().getUserByEmail((req as any).email);

    const userRef = db.collection('users').doc(uid);

    const autoGeneratedId = `${name.toLowerCase()}-${tinyId()}`;
    const newEvent = await userRef
      .collection('events')
      .doc(autoGeneratedId)
      .set({
        name,
        location: location || null,
        id: autoGeneratedId,
        startTime: startTime || null,
        endTime: endTime || null,
        description: description || null,
        title: title || null,
        date,
      });

    const eventRef = userRef.collection('events').doc(autoGeneratedId);

    await db.runTransaction(async (t) => {
      attendees.forEach((person) => {
        const attendeesRef = eventRef.collection('attendees').doc(person.token);
        t.create(attendeesRef, person);
      });
    });

    return res.status(201).send(newEvent);
  } catch (err) {
    const { code, message } = handleError(err);

    return res.status(code).send({ message });
  }
};
